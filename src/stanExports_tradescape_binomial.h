// Generated by rstantools.  Do not edit by hand.

/*
    tradescape is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tradescape is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with tradescape.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_tradescape_binomial_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 90> locations_array__ =
  {" (found before start of program)",
  " (in 'tradescape_binomial', line 39, column 2 to column 32)",
  " (in 'tradescape_binomial', line 40, column 2 to column 39)",
  " (in 'tradescape_binomial', line 41, column 2 to column 38)",
  " (in 'tradescape_binomial', line 44, column 2 to column 22)",
  " (in 'tradescape_binomial', line 45, column 2 to column 22)",
  " (in 'tradescape_binomial', line 46, column 2 to column 22)",
  " (in 'tradescape_binomial', line 49, column 2 to column 31)",
  " (in 'tradescape_binomial', line 50, column 2 to column 47)",
  " (in 'tradescape_binomial', line 53, column 2 to column 37)",
  " (in 'tradescape_binomial', line 57, column 2 to column 73)",
  " (in 'tradescape_binomial', line 58, column 2 to column 68)",
  " (in 'tradescape_binomial', line 59, column 2 to column 50)",
  " (in 'tradescape_binomial', line 62, column 2 to column 34)",
  " (in 'tradescape_binomial', line 70, column 2 to column 72)",
  " (in 'tradescape_binomial', line 71, column 2 to column 55)",
  " (in 'tradescape_binomial', line 66, column 4 to column 66)",
  " (in 'tradescape_binomial', line 65, column 22 to line 67, column 3)",
  " (in 'tradescape_binomial', line 65, column 2 to line 67, column 3)",
  " (in 'tradescape_binomial', line 74, column 4 to column 25)",
  " (in 'tradescape_binomial', line 73, column 22 to line 75, column 3)",
  " (in 'tradescape_binomial', line 73, column 2 to line 75, column 3)",
  " (in 'tradescape_binomial', line 79, column 2 to column 32)",
  " (in 'tradescape_binomial', line 80, column 2 to column 26)",
  " (in 'tradescape_binomial', line 81, column 2 to column 31)",
  " (in 'tradescape_binomial', line 82, column 2 to column 22)",
  " (in 'tradescape_binomial', line 83, column 2 to column 22)",
  " (in 'tradescape_binomial', line 84, column 2 to column 22)",
  " (in 'tradescape_binomial', line 91, column 2 to column 45)",
  " (in 'tradescape_binomial', line 93, column 4 to column 36)",
  " (in 'tradescape_binomial', line 94, column 4 to column 27)",
  " (in 'tradescape_binomial', line 92, column 22 to line 95, column 3)",
  " (in 'tradescape_binomial', line 92, column 2 to line 95, column 3)",
  " (in 'tradescape_binomial', line 99, column 11 to column 16)",
  " (in 'tradescape_binomial', line 99, column 4 to column 26)",
  " (in 'tradescape_binomial', line 101, column 6 to line 103, column 46)",
  " (in 'tradescape_binomial', line 100, column 23 to line 104, column 5)",
  " (in 'tradescape_binomial', line 100, column 4 to line 104, column 5)",
  " (in 'tradescape_binomial', line 105, column 4 to column 51)",
  " (in 'tradescape_binomial', line 98, column 2 to line 106, column 3)",
  " (in 'tradescape_binomial', line 22, column 2 to column 22)",
  " (in 'tradescape_binomial', line 23, column 2 to column 21)",
  " (in 'tradescape_binomial', line 24, column 2 to column 23)",
  " (in 'tradescape_binomial', line 25, column 2 to column 24)",
  " (in 'tradescape_binomial', line 26, column 2 to column 22)",
  " (in 'tradescape_binomial', line 29, column 8 to column 13)",
  " (in 'tradescape_binomial', line 29, column 2 to column 50)",
  " (in 'tradescape_binomial', line 30, column 8 to column 13)",
  " (in 'tradescape_binomial', line 30, column 2 to column 52)",
  " (in 'tradescape_binomial', line 33, column 8 to column 13)",
  " (in 'tradescape_binomial', line 33, column 2 to column 55)",
  " (in 'tradescape_binomial', line 34, column 9 to column 14)",
  " (in 'tradescape_binomial', line 34, column 16 to column 24)",
  " (in 'tradescape_binomial', line 34, column 2 to column 34)",
  " (in 'tradescape_binomial', line 35, column 9 to column 16)",
  " (in 'tradescape_binomial', line 35, column 2 to column 28)",
  " (in 'tradescape_binomial', line 40, column 23 to column 31)",
  " (in 'tradescape_binomial', line 41, column 18 to column 26)",
  " (in 'tradescape_binomial', line 49, column 9 to column 15)",
  " (in 'tradescape_binomial', line 50, column 8 to column 14)",
  " (in 'tradescape_binomial', line 50, column 23 to column 31)",
  " (in 'tradescape_binomial', line 53, column 8 to column 14)",
  " (in 'tradescape_binomial', line 53, column 23 to column 30)",
  " (in 'tradescape_binomial', line 57, column 14 to column 22)",
  " (in 'tradescape_binomial', line 58, column 13 to column 21)",
  " (in 'tradescape_binomial', line 59, column 8 to column 14)",
  " (in 'tradescape_binomial', line 59, column 23 to column 31)",
  " (in 'tradescape_binomial', line 62, column 8 to column 14)",
  " (in 'tradescape_binomial', line 62, column 23 to column 30)",
  " (in 'tradescape_binomial', line 70, column 9 to column 16)",
  " (in 'tradescape_binomial', line 70, column 18 to column 25)",
  " (in 'tradescape_binomial', line 71, column 9 to column 16)",
  " (in 'tradescape_binomial', line 71, column 18 to column 25)",
  " (in 'tradescape_binomial', line 4, column 4 to column 20)",
  " (in 'tradescape_binomial', line 5, column 11 to column 12)",
  " (in 'tradescape_binomial', line 5, column 14 to column 15)",
  " (in 'tradescape_binomial', line 5, column 4 to column 19)",
  " (in 'tradescape_binomial', line 7, column 6 to column 30)",
  " (in 'tradescape_binomial', line 9, column 8 to column 25)",
  " (in 'tradescape_binomial', line 11, column 10 to column 43)",
  " (in 'tradescape_binomial', line 10, column 23 to line 12, column 9)",
  " (in 'tradescape_binomial', line 10, column 8 to line 12, column 9)",
  " (in 'tradescape_binomial', line 13, column 8 to column 46)",
  " (in 'tradescape_binomial', line 14, column 8 to column 26)",
  " (in 'tradescape_binomial', line 8, column 25 to line 15, column 7)",
  " (in 'tradescape_binomial', line 8, column 6 to line 15, column 7)",
  " (in 'tradescape_binomial', line 6, column 19 to line 16, column 5)",
  " (in 'tradescape_binomial', line 6, column 4 to line 16, column 5)",
  " (in 'tradescape_binomial', line 17, column 4 to column 13)",
  " (in 'tradescape_binomial', line 3, column 67 to line 18, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>,-1,-1>
gp_exp_quad(const T0__& x_arg__, const T1__& etasq, const T2__& rhosq,
            const T3__& delta, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>,-1,-1>
gp_exp_quad(const T0__& x_arg__, const T1__& etasq, const T2__& rhosq,
            const T3__& delta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__, T3__>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 73;
    N = stan::math::rows(x);
    current_statement__ = 74;
    stan::math::validate_non_negative_index("K", "N", N);
    current_statement__ = 75;
    stan::math::validate_non_negative_index("K", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> K =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 87;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 77;
      stan::model::assign(K, (etasq + delta), "assigning variable K",
        stan::model::index_uni(i), stan::model::index_uni(i));
      current_statement__ = 85;
      for (int j = (i + 1); j <= N; ++j) {
        local_scalar_t__ sq_dist = DUMMY_VAR__;
        current_statement__ = 78;
        sq_dist = 0;
        current_statement__ = 81;
        for (int d = 1; d <= 2; ++d) {
          current_statement__ = 79;
          sq_dist = (sq_dist +
            stan::math::pow(
              (stan::model::rvalue(x, "x", stan::model::index_uni(i),
                 stan::model::index_uni(d)) -
              stan::model::rvalue(x, "x", stan::model::index_uni(j),
                stan::model::index_uni(d))), 2));
        }
        current_statement__ = 82;
        stan::model::assign(K, (etasq * stan::math::exp((-rhosq * sq_dist))),
          "assigning variable K", stan::model::index_uni(i),
          stan::model::index_uni(j));
        current_statement__ = 83;
        stan::model::assign(K,
          stan::model::rvalue(K, "K", stan::model::index_uni(i),
            stan::model::index_uni(j)), "assigning variable K",
          stan::model::index_uni(j), stan::model::index_uni(i));
      }
    }
    current_statement__ = 88;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_tradescape_binomial final : public model_base_crtp<model_tradescape_binomial> {
private:
  int N_snps;
  int N_obs;
  int N_sites;
  int N_envars;
  int ploidy;
  std::vector<int> snp_idx;
  std::vector<int> site_idx;
  std::vector<int> allele_count;
  Eigen::Matrix<double,-1,-1> envdata_data__;
  Eigen::Matrix<double,-1,-1> coords_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> envdata{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> coords{nullptr, 0, 0};
public:
  ~model_tradescape_binomial() {}
  model_tradescape_binomial(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_tradescape_binomial_namespace::model_tradescape_binomial";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "N_snps", "int",
        std::vector<size_t>{});
      N_snps = std::numeric_limits<int>::min();
      current_statement__ = 40;
      N_snps = context__.vals_i("N_snps")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N_snps", N_snps, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 41;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "N_sites", "int",
        std::vector<size_t>{});
      N_sites = std::numeric_limits<int>::min();
      current_statement__ = 42;
      N_sites = context__.vals_i("N_sites")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "N_sites", N_sites, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "N_envars", "int",
        std::vector<size_t>{});
      N_envars = std::numeric_limits<int>::min();
      current_statement__ = 43;
      N_envars = context__.vals_i("N_envars")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "N_envars", N_envars, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "ploidy", "int",
        std::vector<size_t>{});
      ploidy = std::numeric_limits<int>::min();
      current_statement__ = 44;
      ploidy = context__.vals_i("ploidy")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "ploidy", ploidy, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("snp_idx", "N_obs", N_obs);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "snp_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      snp_idx = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 46;
      snp_idx = context__.vals_i("snp_idx");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "snp_idx", snp_idx, 1);
      current_statement__ = 46;
      stan::math::check_less_or_equal(function__, "snp_idx", snp_idx, N_snps);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("site_idx", "N_obs", N_obs);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "site_idx", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      site_idx = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 48;
      site_idx = context__.vals_i("site_idx");
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "site_idx", site_idx, 1);
      current_statement__ = 48;
      stan::math::check_less_or_equal(function__, "site_idx", site_idx,
        N_sites);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("allele_count", "N_obs", N_obs);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "allele_count", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      allele_count = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 50;
      allele_count = context__.vals_i("allele_count");
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "allele_count",
        allele_count, 0);
      current_statement__ = 50;
      stan::math::check_less_or_equal(function__, "allele_count",
        allele_count, ploidy);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("envdata", "N_obs", N_obs);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("envdata", "N_envars", N_envars);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "envdata", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs),
          static_cast<size_t>(N_envars)});
      envdata_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_obs, N_envars,
                         std::numeric_limits<double>::quiet_NaN());
      new (&envdata)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(envdata_data__.data(), N_obs,
        N_envars);
      {
        std::vector<local_scalar_t__> envdata_flat__;
        current_statement__ = 53;
        envdata_flat__ = context__.vals_r("envdata");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(envdata, envdata_flat__[(pos__ - 1)],
              "assigning variable envdata", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("coords", "N_sites", N_sites);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "coords", "double",
        std::vector<size_t>{static_cast<size_t>(N_sites),
          static_cast<size_t>(2)});
      coords_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_sites, 2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&coords)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(coords_data__.data(),
        N_sites, 2);
      {
        std::vector<local_scalar_t__> coords_flat__;
        current_statement__ = 55;
        coords_flat__ = context__.vals_r("coords");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= N_sites; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(coords, coords_flat__[(pos__ - 1)],
              "assigning variable coords", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("L_pop", "N_envars", N_envars);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("L_pop", "N_envars", N_envars);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("sigma_pop", "N_envars",
        N_envars);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("intercept_snp", "N_snps",
        N_snps);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("z_environment", "N_snps",
        N_snps);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("z_environment", "N_envars",
        N_envars);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("z_gp", "N_snps", N_snps);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("z_gp", "N_sites", N_sites);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("R_pop", "N_envars", N_envars);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("R_pop", "N_envars", N_envars);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("Sigma_pop", "N_envars",
        N_envars);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("Sigma_pop", "N_envars",
        N_envars);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("beta_environment", "N_snps",
        N_snps);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("beta_environment", "N_envars",
        N_envars);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("f", "N_snps", N_snps);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("f", "N_sites", N_sites);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("K", "N_sites", N_sites);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("K", "N_sites", N_sites);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("L_K", "N_sites", N_sites);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("L_K", "N_sites", N_sites);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + ((N_envars * (N_envars - 1)) / 2) + N_envars + 1 + 1
      + 1 + N_snps + (N_snps * N_envars) + (N_snps * N_sites);
  }
  inline std::string model_name() const final {
    return "model_tradescape_binomial";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_tradescape_binomial_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma_intercept = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_intercept = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_pop =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_envars, N_envars,
          DUMMY_VAR__);
      current_statement__ = 2;
      L_pop = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                N_envars);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pop =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars, DUMMY_VAR__);
      current_statement__ = 3;
      sigma_pop = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, N_envars);
      local_scalar_t__ etasq = DUMMY_VAR__;
      current_statement__ = 4;
      etasq = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ rhosq = DUMMY_VAR__;
      current_statement__ = 5;
      rhosq = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 6;
      delta = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept_snp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_snps, DUMMY_VAR__);
      current_statement__ = 7;
      intercept_snp = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_environment =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars,
            DUMMY_VAR__));
      current_statement__ = 8;
      z_environment = in__.template read<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_snps,
                        N_envars);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_gp =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_sites,
            DUMMY_VAR__));
      current_statement__ = 9;
      z_gp = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_snps,
               N_sites);
      Eigen::Matrix<local_scalar_t__,-1,-1> R_pop =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_envars, N_envars,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(R_pop,
        stan::math::multiply_lower_tri_self_transpose(L_pop),
        "assigning variable R_pop");
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma_pop =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_envars, N_envars,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(Sigma_pop,
        stan::math::quad_form_diag(R_pop, sigma_pop),
        "assigning variable Sigma_pop");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta_environment =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> f =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_sites,
            DUMMY_VAR__));
      current_statement__ = 18;
      for (int i = 1; i <= N_snps; ++i) {
        current_statement__ = 16;
        stan::model::assign(beta_environment,
          stan::math::multiply(L_pop,
            stan::math::elt_multiply(sigma_pop,
              stan::model::rvalue(z_environment, "z_environment",
                stan::model::index_uni(i)))),
          "assigning variable beta_environment", stan::model::index_uni(i));
      }
      Eigen::Matrix<local_scalar_t__,-1,-1> K =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_sites, N_sites,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(K,
        gp_exp_quad(coords, etasq, rhosq, delta, pstream__),
        "assigning variable K");
      Eigen::Matrix<local_scalar_t__,-1,-1> L_K =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_sites, N_sites,
          DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(L_K, stan::math::cholesky_decompose(K),
        "assigning variable L_K");
      current_statement__ = 21;
      for (int i = 1; i <= N_snps; ++i) {
        current_statement__ = 19;
        stan::model::assign(f,
          stan::math::multiply(L_K,
            stan::model::rvalue(z_gp, "z_gp", stan::model::index_uni(i))),
          "assigning variable f", stan::model::index_uni(i));
      }
      current_statement__ = 10;
      stan::math::check_corr_matrix(function__, "R_pop", R_pop);
      current_statement__ = 11;
      stan::math::check_cov_matrix(function__, "Sigma_pop", Sigma_pop);
      {
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_intercept, 0,
                         5));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pop, 0, 5));
        current_statement__ = 24;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L_pop, 1));
        current_statement__ = 25;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(rhosq, 5, 2));
        current_statement__ = 26;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(etasq, 5, 5));
        current_statement__ = 27;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(delta, 5, 5));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(intercept_snp, 0,
                         sigma_intercept));
        current_statement__ = 32;
        for (int i = 1; i <= N_snps; ++i) {
          current_statement__ = 29;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z_environment,
                             "z_environment", stan::model::index_uni(i))));
          current_statement__ = 30;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z_gp, "z_gp",
                             stan::model::index_uni(i))));
        }
        {
          current_statement__ = 33;
          stan::math::validate_non_negative_index("logit_p", "N_obs", N_obs);
          Eigen::Matrix<local_scalar_t__,-1,1> logit_p =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_obs,
              DUMMY_VAR__);
          current_statement__ = 37;
          for (int n = 1; n <= N_obs; ++n) {
            current_statement__ = 35;
            stan::model::assign(logit_p,
              ((stan::model::rvalue(intercept_snp, "intercept_snp",
                  stan::model::index_uni(
                    stan::model::rvalue(snp_idx, "snp_idx",
                      stan::model::index_uni(n)))) +
              stan::math::dot_product(
                stan::model::rvalue(beta_environment, "beta_environment",
                  stan::model::index_uni(
                    stan::model::rvalue(snp_idx, "snp_idx",
                      stan::model::index_uni(n)))),
                stan::math::transpose(
                  stan::model::rvalue(envdata, "envdata",
                    stan::model::index_uni(n), stan::model::index_omni()))))
              +
              stan::model::rvalue(f, "f",
                stan::model::index_uni(
                  stan::model::rvalue(snp_idx, "snp_idx",
                    stan::model::index_uni(n))),
                stan::model::index_uni(
                  stan::model::rvalue(site_idx, "site_idx",
                    stan::model::index_uni(n))))),
              "assigning variable logit_p", stan::model::index_uni(n));
          }
          current_statement__ = 38;
          lp_accum__.add(stan::math::binomial_logit_lpmf<propto__>(
                           allele_count, ploidy, logit_p));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_tradescape_binomial_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma_intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma_intercept = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,-1> L_pop =
        Eigen::Matrix<double,-1,-1>::Constant(N_envars, N_envars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      L_pop = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                N_envars);
      Eigen::Matrix<double,-1,1> sigma_pop =
        Eigen::Matrix<double,-1,1>::Constant(N_envars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma_pop = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, N_envars);
      double etasq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      etasq = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double rhosq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      rhosq = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      delta = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> intercept_snp =
        Eigen::Matrix<double,-1,1>::Constant(N_snps,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      intercept_snp = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps);
      std::vector<Eigen::Matrix<double,-1,1>> z_environment =
        std::vector<Eigen::Matrix<double,-1,1>>(N_snps,
          Eigen::Matrix<double,-1,1>::Constant(N_envars,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      z_environment = in__.template read<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_snps,
                        N_envars);
      std::vector<Eigen::Matrix<double,-1,1>> z_gp =
        std::vector<Eigen::Matrix<double,-1,1>>(N_snps,
          Eigen::Matrix<double,-1,1>::Constant(N_sites,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 9;
      z_gp = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_snps,
               N_sites);
      Eigen::Matrix<double,-1,-1> R_pop =
        Eigen::Matrix<double,-1,-1>::Constant(N_envars, N_envars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma_pop =
        Eigen::Matrix<double,-1,-1>::Constant(N_envars, N_envars,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> beta_environment =
        std::vector<Eigen::Matrix<double,-1,1>>(N_snps,
          Eigen::Matrix<double,-1,1>::Constant(N_envars,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> f =
        std::vector<Eigen::Matrix<double,-1,1>>(N_snps,
          Eigen::Matrix<double,-1,1>::Constant(N_sites,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> K =
        Eigen::Matrix<double,-1,-1>::Constant(N_sites, N_sites,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> L_K =
        Eigen::Matrix<double,-1,-1>::Constant(N_sites, N_sites,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma_intercept);
      out__.write(L_pop);
      out__.write(sigma_pop);
      out__.write(etasq);
      out__.write(rhosq);
      out__.write(delta);
      out__.write(intercept_snp);
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          out__.write(z_environment[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          out__.write(z_gp[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      stan::model::assign(R_pop,
        stan::math::multiply_lower_tri_self_transpose(L_pop),
        "assigning variable R_pop");
      current_statement__ = 11;
      stan::model::assign(Sigma_pop,
        stan::math::quad_form_diag(R_pop, sigma_pop),
        "assigning variable Sigma_pop");
      current_statement__ = 18;
      for (int i = 1; i <= N_snps; ++i) {
        current_statement__ = 16;
        stan::model::assign(beta_environment,
          stan::math::multiply(L_pop,
            stan::math::elt_multiply(sigma_pop,
              stan::model::rvalue(z_environment, "z_environment",
                stan::model::index_uni(i)))),
          "assigning variable beta_environment", stan::model::index_uni(i));
      }
      current_statement__ = 14;
      stan::model::assign(K,
        gp_exp_quad(coords, etasq, rhosq, delta, pstream__),
        "assigning variable K");
      current_statement__ = 15;
      stan::model::assign(L_K, stan::math::cholesky_decompose(K),
        "assigning variable L_K");
      current_statement__ = 21;
      for (int i = 1; i <= N_snps; ++i) {
        current_statement__ = 19;
        stan::model::assign(f,
          stan::math::multiply(L_K,
            stan::model::rvalue(z_gp, "z_gp", stan::model::index_uni(i))),
          "assigning variable f", stan::model::index_uni(i));
      }
      current_statement__ = 10;
      stan::math::check_corr_matrix(function__, "R_pop", R_pop);
      current_statement__ = 11;
      stan::math::check_cov_matrix(function__, "Sigma_pop", Sigma_pop);
      if (emit_transformed_parameters__) {
        out__.write(R_pop);
        out__.write(Sigma_pop);
        for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
            out__.write(beta_environment[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
            out__.write(f[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(K);
        out__.write(L_K);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma_intercept = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_intercept = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_intercept);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_pop =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_envars, N_envars,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(L_pop,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N_envars, N_envars),
        "assigning variable L_pop");
      out__.write_free_cholesky_factor_corr(L_pop);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pop =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sigma_pop,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_envars),
        "assigning variable sigma_pop");
      out__.write_free_lb(0, sigma_pop);
      local_scalar_t__ etasq = DUMMY_VAR__;
      current_statement__ = 4;
      etasq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, etasq);
      local_scalar_t__ rhosq = DUMMY_VAR__;
      current_statement__ = 5;
      rhosq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rhosq);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 6;
      delta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, delta);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept_snp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_snps, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(intercept_snp,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps),
        "assigning variable intercept_snp");
      out__.write(intercept_snp);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_environment =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars,
            DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          current_statement__ = 8;
          stan::model::assign(z_environment, in__.read<local_scalar_t__>(),
            "assigning variable z_environment",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(z_environment);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_gp =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_sites,
            DUMMY_VAR__));
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          current_statement__ = 9;
          stan::model::assign(z_gp, in__.read<local_scalar_t__>(),
            "assigning variable z_gp", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(z_gp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma_intercept",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "L_pop", "double",
        std::vector<size_t>{static_cast<size_t>(N_envars),
          static_cast<size_t>(N_envars)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma_pop",
        "double", std::vector<size_t>{static_cast<size_t>(N_envars)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "etasq", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "rhosq", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "intercept_snp",
        "double", std::vector<size_t>{static_cast<size_t>(N_snps)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "z_environment",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_snps),
          static_cast<size_t>(N_envars)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "z_gp", "double",
        std::vector<size_t>{static_cast<size_t>(N_snps),
          static_cast<size_t>(N_sites)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma_intercept = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_intercept = context__.vals_r("sigma_intercept")[(1 - 1)];
      out__.write_free_lb(0, sigma_intercept);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_pop =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_envars, N_envars,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_pop_flat__;
        current_statement__ = 2;
        L_pop_flat__ = context__.vals_r("L_pop");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= N_envars; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(L_pop, L_pop_flat__[(pos__ - 1)],
              "assigning variable L_pop", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_pop);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pop =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_pop_flat__;
        current_statement__ = 3;
        sigma_pop_flat__ = context__.vals_r("sigma_pop");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(sigma_pop, sigma_pop_flat__[(pos__ - 1)],
            "assigning variable sigma_pop", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_pop);
      local_scalar_t__ etasq = DUMMY_VAR__;
      current_statement__ = 4;
      etasq = context__.vals_r("etasq")[(1 - 1)];
      out__.write_free_lb(0, etasq);
      local_scalar_t__ rhosq = DUMMY_VAR__;
      current_statement__ = 5;
      rhosq = context__.vals_r("rhosq")[(1 - 1)];
      out__.write_free_lb(0, rhosq);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 6;
      delta = context__.vals_r("delta")[(1 - 1)];
      out__.write_free_lb(0, delta);
      Eigen::Matrix<local_scalar_t__,-1,1> intercept_snp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_snps, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> intercept_snp_flat__;
        current_statement__ = 7;
        intercept_snp_flat__ = context__.vals_r("intercept_snp");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N_snps; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(intercept_snp, intercept_snp_flat__[(pos__ -
            1)], "assigning variable intercept_snp",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(intercept_snp);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_environment =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_envars,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_environment_flat__;
        current_statement__ = 8;
        z_environment_flat__ = context__.vals_r("z_environment");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(z_environment, z_environment_flat__[(pos__ -
              1)], "assigning variable z_environment",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(z_environment);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z_gp =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_snps,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_sites,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_gp_flat__;
        current_statement__ = 9;
        z_gp_flat__ = context__.vals_r("z_gp");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(z_gp, z_gp_flat__[(pos__ - 1)],
              "assigning variable z_gp", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(z_gp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma_intercept", "L_pop",
                "sigma_pop", "etasq", "rhosq", "delta", "intercept_snp",
                "z_environment", "z_gp"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"R_pop", "Sigma_pop", "beta_environment", "f", "K", "L_K"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_envars),
                  static_cast<size_t>(N_envars)},
                std::vector<size_t>{static_cast<size_t>(N_envars)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_snps)},
                std::vector<size_t>{static_cast<size_t>(N_snps),
                  static_cast<size_t>(N_envars)},
                std::vector<size_t>{static_cast<size_t>(N_snps),
                  static_cast<size_t>(N_sites)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_envars),
               static_cast<size_t>(N_envars)},
             std::vector<size_t>{static_cast<size_t>(N_envars),
               static_cast<size_t>(N_envars)},
             std::vector<size_t>{static_cast<size_t>(N_snps),
               static_cast<size_t>(N_envars)},
             std::vector<size_t>{static_cast<size_t>(N_snps),
               static_cast<size_t>(N_sites)},
             std::vector<size_t>{static_cast<size_t>(N_sites),
               static_cast<size_t>(N_sites)},
             std::vector<size_t>{static_cast<size_t>(N_sites),
               static_cast<size_t>(N_sites)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_intercept");
    for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_envars; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_pop" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_pop" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "etasq");
    param_names__.emplace_back(std::string() + "rhosq");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= N_snps; ++sym1__) {
      param_names__.emplace_back(std::string() + "intercept_snp" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_environment" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_gp" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_envars; ++sym2__) {
          param_names__.emplace_back(std::string() + "R_pop" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_envars; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_pop" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_environment" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_sites; ++sym2__) {
          param_names__.emplace_back(std::string() + "K" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_sites; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_K" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_intercept");
    for (int sym1__ = 1; sym1__ <= ((N_envars * (N_envars - 1)) /
         2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_pop" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_pop" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "etasq");
    param_names__.emplace_back(std::string() + "rhosq");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= N_snps; ++sym1__) {
      param_names__.emplace_back(std::string() + "intercept_snp" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_environment" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_gp" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= ((N_envars * (N_envars - 1)) /
           2); ++sym1__) {
        param_names__.emplace_back(std::string() + "R_pop" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= (N_envars + ((N_envars * (N_envars - 1))
           / 2)); ++sym1__) {
        param_names__.emplace_back(std::string() + "Sigma_pop" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_envars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_environment" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_snps; ++sym2__) {
          param_names__.emplace_back(std::string() + "f" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_sites; ++sym2__) {
          param_names__.emplace_back(std::string() + "K" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N_sites; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_sites; ++sym2__) {
          param_names__.emplace_back(std::string() + "L_K" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_pop\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_envars) + ",\"cols\":" + std::to_string(N_envars) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "},\"block\":\"parameters\"},{\"name\":\"etasq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rhosq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_snp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_snps) + "},\"block\":\"parameters\"},{\"name\":\"z_environment\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "}},\"block\":\"parameters\"},{\"name\":\"z_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_sites) + "}},\"block\":\"parameters\"},{\"name\":\"R_pop\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_envars) + ",\"cols\":" + std::to_string(N_envars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_pop\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_envars) + ",\"cols\":" + std::to_string(N_envars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_environment\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_sites) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_sites) + ",\"cols\":" + std::to_string(N_sites) + "},\"block\":\"transformed_parameters\"},{\"name\":\"L_K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_sites) + ",\"cols\":" + std::to_string(N_sites) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N_envars * (N_envars - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "},\"block\":\"parameters\"},{\"name\":\"etasq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rhosq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_snp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_snps) + "},\"block\":\"parameters\"},{\"name\":\"z_environment\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "}},\"block\":\"parameters\"},{\"name\":\"z_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_sites) + "}},\"block\":\"parameters\"},{\"name\":\"R_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N_envars * (N_envars - 1)) /2)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N_envars + ((N_envars * (N_envars - 1)) /2))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_environment\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_envars) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_snps) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_sites) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_sites) + ",\"cols\":" + std::to_string(N_sites) + "},\"block\":\"transformed_parameters\"},{\"name\":\"L_K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_sites) + ",\"cols\":" + std::to_string(N_sites) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + (N_envars * N_envars)) +
      N_envars) + 1) + 1) + 1) + N_snps) + (N_snps * N_envars)) + (N_snps *
      N_sites));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((N_envars * N_envars) + (N_envars * N_envars)) + (N_snps *
      N_envars)) + (N_snps * N_sites)) + (N_sites * N_sites)) + (N_sites *
      N_sites)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + (N_envars * N_envars)) +
      N_envars) + 1) + 1) + 1) + N_snps) + (N_snps * N_envars)) + (N_snps *
      N_sites));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((N_envars * N_envars) + (N_envars * N_envars)) + (N_snps *
      N_envars)) + (N_snps * N_sites)) + (N_sites * N_sites)) + (N_sites *
      N_sites)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_tradescape_binomial_namespace::model_tradescape_binomial;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_tradescape_binomial_namespace::profiles__;
}
#endif
#endif
